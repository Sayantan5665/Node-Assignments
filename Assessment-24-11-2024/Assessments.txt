Assignment – I 
--------------
    1.Create a MongoDB database with following collections: 
        a.Users 
        b.Categories 
        c.Questions 
    2.Create following APIs: 
        a.User signup with email account verification 
        b.User login 
        c.Get user profile 
        d.Edit user profile (with profile picture) 
        e.List of questions for each category 
        f.Users will be able to submit answers to their respective questions. 
        g.Search By Question with answer submitted by user with submit time based on user's time zone. 
        h.List of all categories along with total questions count of those category 

    Note:  
        1.A single question can be assigned to multiple categories and should be Multiple choice questions. 
        2.Use MongoDB aggregation Query 
        3.Don’t use any populate or any raw JS query for fetching data from MongoDB. 
 









 
Assignment – II 
----------------
    1.Create a MongoDB database with following collections: 
        a.Users 
        b.Roles (roles include Super Admin, User) 
        c.Categories 
        d.Subcategory
        e.product
    2.Perform the following tasks: 
        a.The Super Admin has the authority to add Admins and Users by providing their details. 
        b.Upon adding an Admin or User, they will receive a confirmation email along with an autogenerated password, allowing them to log into the application.
        c.In the dashboard there are following menus 
            i.Home: Displays the total number of products, categories, and subcategories. Also displays the total number of products under each specific category and subcategory. 
            ii.Users: Accessible by both Super Admin and Admin. They can add, edit, activate/deactivate, and delete Users. 
            iii.Product: Accessible by all two roles (Super Admin, User). Allows adding, editing, and deleting products. Products can be added under a specific category and subcategory. In the product listing show product name, category name, subcategory name and price. 
            iv.Category: Accessible to all roles. Allows for adding, editing, and deleting categories. The category list displays the category name along with its subcategories. 
            v.Subcategory: Accessible to both roles. Allows for adding, editing, and deleting subcategories within specific categories. The subcategory list shows the subcategory name along with the name of its associated category. 

    Note: Use a MongoDB aggregation query with the pipeline feature. The template engine to be used is EJS. Also, category and subcategory should be in a single collection called categories. Don’t use any populate or any raw JS query for fetching data from MongoDB. 
 
 
 





 
 
Assignment – III 
-----------------
    1.Create a MongoDB database with following collections: 
        a.Users 
        b.Products 
        c.Categories 
    2.Create following APIs: 
        a.User signup with email account verification 
        b.User login 
        c.Get user profile 
        d.Edit user profile (with profile picture) 
        e.Add categories with category name 
        f.Add product with product name, product price and category and stock 
        g.List of categories with total number of products and list of products for that category 
        h.List of products 
        i.Edit product information 
        j.Delete product information 
        k.List of products whose stock is less than 1 
        l.Send all product lists to user email in table format. 
     
    Note: Use a MongoDB aggregation query with the pipeline feature. Don’t use any populate or any raw JS query for fetching data from MongoDB. 
 
 










Assignment – IV 
----------------
    1.Create a MongoDB database with following collections: 
        a.Users 
        b.Posts 
        c.Categories 
        d.Comments 
    2.Create following APIs: 
        a.User signup with email account verification 
        b.Authenticate users using their email and password. 
        c.Retrieve the profile details of the logged-in user, including their bio and profile picture. 
        d.Allow users to edit their profile information, including uploading a new profile picture. 
        e.Add a new blog category with a name and description. 
        f.Create a new blog post with a title, content, category, and tags. The author should be automatically linked to the post. 
        g.List all categories along with the total number of posts in each category and the posts for that category. 
        h.Allow the author to edit their blog post, including updating the title, content, category, and tags. 
        i.Delete a blog post from the database. 
        j.Retrieve a list of blog posts sorted by the number of likes. 
     
    Note: Use a MongoDB aggregation query with the pipeline feature. Don’t use any populate or any raw JS query for fetching data from MongoDB. 
 
 
 
